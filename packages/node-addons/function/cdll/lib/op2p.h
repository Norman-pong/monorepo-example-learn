/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package igitlab.sunniwell.net/saa/op2p/client/libs/op2p */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "client.go"
#include <stdint.h>
#include "errno.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// 新建客户端: 成功返回客户端句柄, 失败返回 <0
//
extern __declspec(dllexport) int CNewClient(char* conf);

// 启动: 失败返回 <0
//
extern __declspec(dllexport) int CStart(int sd);

// 关闭客户端: 失败返回 <0
//
extern __declspec(dllexport) int CClose(int sd);

// 获取客户端错误信息
//
extern __declspec(dllexport) int CErrmsg(int sd, char* buf, size_t buflen);

// 通知网络变化
//
extern __declspec(dllexport) void CNetworkChangeNotify(int sd);

// 获取状态
// PeerNodeState int32  1:offline, 2:online
// RelayNodeSate int32  1:offline, 2:online
// ConnectType   int32  1:direct, 2:relay
// RemoteAddr    string remote address
// NatType       string natType: "easy", "hard",""
//
extern __declspec(dllexport) void CGetState(int sd, int* peerNodeState, int* relayNodeState, int* connectType, char* remoteAddr, char* natType);

// 获取状态描述
//
extern __declspec(dllexport) char* CGetConnectTypeDescribe(int sd, int connectType);

#ifdef __cplusplus
}
#endif
